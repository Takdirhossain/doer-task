generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  TEACHER
  STUDENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}
enum LogLevel {
  INFO
  WARN
  ERROR
  DEBUG
  FATAL
}


model User {
  id            String   @id @default(cuid())
  username      String   @unique @db.VarChar(100)
  email         String   @unique @db.VarChar(255)
  passwordHash  String   @db.VarChar(255)
  mobileNumber  String   @unique @db.VarChar(20)
  role          Role?    @relation(fields: [roleId], references: [id])
  roleId        String?    
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  student       Student?
  loginLogs     LoginLog[]
  attendanceRecords Attendance[]
  logs          Log[]

  @@index([username])
  @@index([email])
  @@index([status])
  @@map("users")
}

model Student {
  id                String   @id @default(cuid())
  userId            String   @unique
  teacherId         String?
  firstName         String   @db.VarChar(100)
  lastName          String   @db.VarChar(100)
  class             Int? 
  rollNumber        Int?
  dateOfBirth       DateTime?
  address           String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  attendanceRecords Attendance[]

  @@unique([class, rollNumber])
  @@index([userId])
  @@index([teacherId])
  @@index([class])
  @@map("students")
}

model Attendance {
  id            String   @id @default(cuid())
  studentId     String
  teacherId     String
  date          DateTime
  status        AttendanceStatus @default(ABSENT)
  remarks       String?  @db.Text
  markedAt      DateTime @default(now())
  markedBy      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  student Student  @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  teacher       User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([studentId, date, teacherId])
  @@index([studentId])
  @@index([teacherId])
  @@index([date])
  @@index([status])
  @@index([createdAt])
  @@map("attendances")
}

model LoginLog {
  id            String   @id @default(cuid())
  userId        String
  ipAddress     String?  @db.VarChar(45)
  userAgent     String?  @db.Text
  message       String?  @db.Text
  actionTime    DateTime @default(now())
  actionType    String   @db.VarChar(50) @default("LOGIN")

  status        String   @db.VarChar(50) @default("SUCCESS")
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([actionTime])
  @@index([createdAt])
  @@map("login_logs")
}

model Log {
  id          String     @id @default(cuid())
  userId      String?   
  userName    String?   
  level       LogLevel   @default(INFO)        
  category    String?    @db.VarChar(100)     
  action      String?    @db.VarChar(100)     
  ipAddress   String?    @db.VarChar(45)
  message     String     @db.Text            
  method      String?    @db.VarChar(10)     
  path        String?    @db.Text            
  meta        Json?                             
  createdAt   DateTime   @default(now())
  deletedAt   DateTime?                           

  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([category])
  @@map("logs")
}
model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  rolePermissions RolePermission[]
  users           User[] 

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  @@map("roles")
}

model Permission {
  id          String           @id @default(cuid())
  name        String
  module      String
  rolePermissions RolePermission[]

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([name, module])
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}
